// GPars – Groovy Parallel Systems
//
// Copyright © 2008–2018  The original author or authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//  Author: Václav Pech
//  Author: Russel Winder
//  Author: Dierk König
//  Author: Hans Dockter
//  Author: Rene Groeschke
//  Author: Hamlet D'Arcy - Updated OSGi configuration
//  Author: Schalk W. Cronjé
//
//  uplifted to java 23, groovy 4.0.26 and general library refresh, and gradle 8.13
//  Author: Will Woodman

plugins {
    id 'groovy'
    id 'java-library'
    id 'maven-publish'
    id 'eclipse'
    id 'idea'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

version '2.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
    withJavadocJar()
    withSourcesJar()
}

group = 'org.groovyx.gpars'

ext {
    theVendor = 'groovyx.gpars.org'
    theTitle = 'GPars: Groovy Parallel Systems'
    titleForDocumentation = 'gpars' + ' ' + version  // Fixed: using explicit name instead of archiveBaseName
    copyrightString = 'Copyright &#169; 2008&#8211;2020  V&#225;Will Woodman (on behalf of) clav Pech.  All Rights Reserved.'
    packageTitle = group
    description = 'The Groovy and Java high-level concurrency library offering actors, dataflow, CSP, agents, parallel collections, fork/join and more'
}

repositories {
    mavenCentral()
    if (project.hasProperty('gpars_useMavenLocal') && gpars_useMavenLocal.toBoolean()) {
        mavenLocal()
    }
}

configurations {
    deployerJars
    docs
    cover
    groovyDoc // Hack due to problem with groovydoc process in Gradle.
}

// Ensure latest SNAPSHOTS are used for publishing
configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    implementation group: 'org.apache.groovy', name: 'groovy-all', version: "${gpars_groovyVersion}"

    implementation "org.multiverse:multiverse-core:${gpars_multiverseVersion}", { transitive = false }
    implementation "io.netty:netty-all:${gpars_nettyVersion}"
    implementation "org.codehaus.jcsp:jcsp:${gpars_jcspVersion}"

    implementation group: 'org.apache.groovy', name: 'groovy-test', version: '4.0.26'
    testImplementation "org.spockframework:spock-core:${gpars_spockVersion}"
    testImplementation "com.google.guava:guava:${gpars_guavaVersion}"
    testImplementation fileTree(dir: 'lib', include: '*.jar')
    testImplementation group: 'com.google.caliper', name: 'caliper', version: '1.0-beta-3'


    deployerJars "org.apache.maven.wagon:wagon-http-lightweight:${gpars_wagonhttplightweightVersion}"

    // Have to get some specific dependencies into the GroovyDoc process.
    groovyDoc "org.codehaus.groovy:groovy:${gpars_groovyVersion}"
    groovyDoc "org.fusesource.jansi:jansi:${gpars_jansiVersion}"
}

tasks.register('copyDSLDefinitions', Copy) {
    into layout.buildDirectory.dir("classes/groovy/main")
    from(sourceSets.main.allSource) { include('**/*.gdsl') }
}

tasks.named('jar') {
    archiveBaseName = 'gpars'
    manifest {
        attributes (
                'archiveName': 'gpars',
                'archiveVersion': project.version,
                'symbolicName': 'groovyx.gpars.org'
        )
    }
    dependsOn copyDSLDefinitions
}

tasks.named('test') {
    forkEvery = 600
    maxParallelForks = project.hasProperty('gpars_maxTestForks') ? gpars_maxTestForks.toInteger() : 1
    exclude '**/integration/**/*.*'
}

tasks.register('integrationTest', Test) {
    include '**/integration/**/*.*'
    dependsOn 'test'
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    failOnError = false
}

tasks.named('javadoc') {
    options.addBooleanOption('html5', true)
    options.overview = file('overview.html')
    options.showAll()
    options.encoding = 'UTF-8'
    options.use = true
    options.author = true
    options.version = true
    options.windowTitle = titleForDocumentation
    options.docTitle = titleForDocumentation
    options.footer = copyrightString

    // Add this line to exclude Groovy classes from Javadoc processing
    source = sourceSets.main.java.srcDirs
    // Or alternatively, if you need to be more specific:
    // source = sourceSets.main.allJava

    doFirst {
        title = titleForDocumentation
        options.docTitle = title
    }

    // Disable doclint in Java 11+ to avoid strict javadoc checking
    if (JavaVersion.current().isJava11Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    // Add failOnError = false to prevent build failures due to Javadoc errors
    failOnError = false
}

// Updated GroovyDoc configuration
tasks.named('groovydoc') {
    classpath = configurations.groovyDoc // Hack, we shouldn't have to do this.
    dependsOn('classes')
    use = true
    windowTitle = packageTitle
    docTitle = packageTitle
    header = packageTitle
    footer = copyrightString
    include 'groovyx/groovyx.gpars/**'
    source = sourceSets.main.groovy
    groovyClasspath = configurations.groovyDoc

    doFirst {
        def overviewFile = file('overview.html')
        if (overviewFile.exists()) {
            overview = overviewFile
        }
    }
}

asciidoctorj {
    modules {
        pdf.version = '1.6.2'
    }
}

tasks.named('asciidoctor') {
    sourceDir file('src/docs/asciidoc')
    sources {
        include 'index.adoc', 'quick_reference.adoc'
    }
    outputOptions {
        backends 'html5', 'pdf'
    }
    attributes = [
            toc: 'left',
            doctype: 'book',
            icons: 'font',
            sectlink: true,
            sectanchors: true,
            numbered: true,
            linkattrs: true,
            imagesdir: 'images',
            'source-highlighter': 'coderay',
            stylesheet: 'css/style.css',
            'pdf-stylesdir': 'theme',
            'pdf-fontsdir': 'fonts',
            'pdf-style': 'groovyx.gpars'
    ]
}

/**
 * zip tasks :
 * In newer versions of Gradle, the classifier property is deprecated
 * in favor of archiveClassifier for Zip tasks.
 * The publication configuration also needed to be updated to properly
 * reference the archive file produced by the task.
 */
tasks.register('zipGuide', Zip) {
    archiveAppendix = 'guide'
    from(layout.buildDirectory.dir('docs/asciidoc'))
    dependsOn 'asciidoctor'
}

tasks.register('zipSamples', Zip) {
    // Make sure the base name matches your project name without spaces
    archiveBaseName = 'gpars'
    archiveVersion = project.version
    archiveClassifier = 'samples'

    // Make sure we're actually including files
    from('samples') {
        // Include all files from the samples directory
        include '**/*'
    }

    // Make sure the directory exists before trying to zip it
    doFirst {
        def samplesDir = file('samples')
        if (!samplesDir.exists()) {
            logger.warn("Samples directory doesn't exist. Creating empty directory.")
            samplesDir.mkdirs()
        }
    }
}

tasks.register('zipJavaDemo', Zip) {
    archiveAppendix = 'mvn-java-demo'
    archiveClassifier = 'mvn-java-demo'  // Fixed: using archiveClassifier
    from('java-demo') {
        include 'src/**'
        include 'pom.xml'
    }
}

tasks.register('zipDist', Zip) {
    from tasks.named('jar')
    from(sourceSets.main.runtimeClasspath) {
        include('netty*', 'multiverse*')
    }
    from('licenses') {
        include '*'
        into 'licenses'
    }
    from('src/main/resources/META-INF/') {
        include('LICENSE.txt', 'NOTICE.txt')
    }
    archiveAppendix = 'all'
    archiveClassifier = 'all'  // Fixed: using archiveClassifier
}

publishing {
    publications {
        gParsPublish(MavenPublication) {
            artifactId = 'gpars'
            from components.java

            //fixed sourcing for the artifacts
            //cant find samples - comment out for now
            /* artifact(tasks.named('zipSamples').flatMap { it.archiveFile }) {
                // Fixed: using closure parameter instead of direct classifier property
                classifier = 'samples'
            }*/
            artifact(tasks.named('zipDist').flatMap { it.archiveFile }) {
                classifier = 'all'
            }
            /*
            artifact(tasks.named('zipGuide').flatMap { it.archiveFile }) {
                classifier = 'guide'
            }
            artifact(tasks.named('zipJavaDemo').flatMap { it.archiveFile }) {
                classifier = 'mvn-java-demo'
            }
            */
        }
    }

    repositories {
        if (project.hasProperty('gpars_useMavenLocal') && gpars_useMavenLocal.toBoolean()) {
            mavenLocal()
        } else {
            // Put other repositories, jfrog, etc here
        }
    }
}

// Optional release task
tasks.register('release') {
    dependsOn 'build', 'sourcesJar', 'javadocJar', 'zipSamples', 'zipJavaDemo', 'zipDist', 'zipGuide'
    doLast {
        println 'Release task completed'
    }
}
