// GPars – Groovy Parallel Systems
//
// Copyright © 2008–2018  The original author or authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//  Author: Václav Pech
//  Author: Russel Winder
//  Author: Dierk König
//  Author: Hans Dockter
//  Author: Rene Groeschke
//  Author: Hamlet D'Arcy - Updated OSGi configuration
//  Author: Schalk W. Cronjé
//
//  uplifted to java 11, groovy 3.0.2 and general library refresh
//  Author: Will Woodman


plugins {
    id 'groovy'
    id 'java'
    id 'maven'
    id 'maven-publish'
    //id 'osgi'
    id 'eclipse'
    id 'idea'
    id("org.asciidoctor.convert") version "1.5.9.2"
}

version '2.0-SNAPSHOT'

sourceCompatibility = 1.11

group = 'org.groovyx.gpars'
archivesBaseName = 'groovyx.gpars'

ext {
    theVendor = 'groovyx.gpars.org'
    theTitle = 'GPars: Groovy Parallel Systems'
    titleForDocumentation = archivesBaseName + ' ' + version
    copyrightString = 'Copyright &#169; 2008&#8211;2020  V&#225;Will Woodman (on behalf of) clav Pech.  All Rights Reserved.'
    packageTitle = group
    description = 'The Groovy and Java high-level concurrency library offering actors, dataflow, CSP, agents, parallel collections, fork/join and more'
}

repositories {
    mavenCentral()
    jcenter()
    if (gpars_useMavenLocal) { mavenLocal() }

}

configurations {
    deployerJars
    docs
    cover
    groovyDoc // Hack due to problem with groovydoc process in Gradle.
}

//ensure latest SHNAPSOTS are used for publishing
configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.13'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: "${gpars_groovyVersion}"

    compile "org.codehaus.groovy:groovy-cli-commons:${gpars_groovyVersion}"
    compile "org.multiverse:multiverse-core:${gpars_multiverseVersion}", { transitive = false }
    compile "io.netty:netty-all:${gpars_nettyVersion}"
    compile "org.codehaus.jcsp:jcsp:${gpars_jcspVersion}"
    testCompile "org.spockframework:spock-core:${gpars_spockVersion}"
    testCompile "com.google.code.gson:gson:${gpars_gsonVersion}"
    testCompile "com.google.guava:guava:${gpars_guavaVersion}"
    testCompile fileTree(dir: 'lib', include: '*.jar')
    testCompile group: 'com.google.caliper', name: 'caliper', version: '1.0-beta-2'
    deployerJars "org.apache.maven.wagon:wagon-http-lightweight:${gpars_wagonhttplightweightVersion}"
    //cover "net.sourceforge.cobertura:cobertura:${gpars_coberturaVersion}"
    // cant find testRuntime "net.sourceforge.cobertura:cobertura:${gpars_coberturaVersion}"
    // Have to get some specific dependencies into the GroovyDoc process.
    groovyDoc "org.codehaus.groovy:groovy:${gpars_groovyVersion}"
    groovyDoc "org.fusesource.jansi:jansi:${gpars_jansiVersion}"

}

//tasks.withType(GroovyCompile).all {
//    options.compilerArgs << "-Xlint:all" << "-Werror"
//}
//  To get the details of the "unchecked" issues.
//compileGroovy.options.compilerArgs = ['-Xlint']

task copyDSLDefinitions(type: Copy) {
    into "$buildDir/classes/main"
    from(sourceSets.main.allSource) { include('**/*.gdsl') }
}

jar {
    archivesBaseName = 'gpars-all'//project.name + '-all'
    manifest {
        attributes (
                archiveName : 'groovyx.gpars',
                archiveVersion: this.version,
                symbolicName:'groovyx.gpars.org',
                /*
                'Bundle-Vendor', ext.theVendor,
                'Bundle-Description', group,
                'Bundle-DocURL', 'http://gpars.codehaus.org',
                'Built-By', System.properties.'user.name',
                'Extension-Name', archivesBaseName,
                'Specification-Title', ext.theTitle,
                'Specification-Vendor', ext.theVendor,
                'Implementation-Title', ext.theTitle,
                'Implementation-Version', archiveVersion,
                'Implementation-Vendor', ext.theVendor,
                'Provider':ext.theVendor,
                'Export-Package', "*;version=${archiveVersion}",
                'Import-Package', '*;resolution:=optional'*/
        )
    }
    dependsOn copyDSLDefinitions
}

test {
    forkEvery = 600
    maxParallelForks = hasProperty('gpars_maxTestForks') ? gpars_maxTestForks : 1
    exclude '**/integration/**/*.*'
}

task integrationTest(type: Test, dependsOn: 'test') {
    include '**/integration/**/*.*'
}

// codenarc configuration
tasks.withType(CodeNarc).all { codeNarcTask ->
    codeNarcTask.configFile = file('./config/codenarc/codenarc.groovy')
    codeNarcTask.ignoreFailures = true
}


javadoc {
    options.overview('overview.html')
    options.showAll()
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle(titleForDocumentation)
    options.docTitle(titleForDocumentation)
    options.footer(copyrightString)
    doFirst {
        javadoc.title = titleForDocumentation
        javadoc.options.docTitle = javadoc.title
    }
}

if (JavaVersion.current().isJava11Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

groovydoc {
    groovyClasspath = configurations.groovyDoc // Hack, we shouldn't have to do this.
    dependsOn(classes)
    includePrivate = true
    use = true
    windowTitle = packageTitle
    docTitle = packageTitle
    header = packageTitle
    footer = copyrightString
    include 'groovyx/groovyx.gpars/**'
    overviewText = project.resources.text.fromFile('overview.html')
}


//have i resolved the plugin correctly ?
asciidoctor {
    sources {
        include 'index.adoc', 'quick_reference.adoc'
    }
    backends 'html5','pdf'
    attributes  toc: 'left',
            doctype: 'book',
            icons: 'font',
            sectlink: true,
            sectanchors: true,
            numbered: true,
            linkattrs: true,
            imagesdir: 'images',
            'source-highlighter': 'coderay',
            stylesheet: 'css/style.css',
            'pdf-stylesdir': 'theme',
            'pdf-fontsdir': 'fonts',
            'pdf-style': 'groovyx.gpars'
}

task jarDoc(type: Jar, dependsOn: [javadoc, groovydoc]) {
    archiveClassifier = 'javadoc'
    from docsDir
}

task jarSrc(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives(jarSrc)
    archives(jarDoc)
}

task zipGuide(type: Zip, dependsOn: asciidoctor) {
    archiveAppendix = 'guide'
    from(buildDir.name + '/asciidoc')
}

task zipSamples(type: Zip) {
    archiveAppendix = 'samples'
    from sourceSets.test.allSource.matching {
        include 'groovyx/gpars/samples/**'
    }
}

task zipJavaDemo(type: Zip) {
    archiveAppendix = 'mvn-java-demo'
    from('java-demo'){
        include 'src/**'
        include 'pom.xml'
    }
}

task zipDist(type: Zip) {
    from jar.outputs.files
    from(sourceSets.main.runtimeClasspath){
        include('netty*', 'multiverse*')
    }
    from('licenses'){
        include '*'
        into 'licenses'
    }
    from('src/main/resources/META-INF/'){
        include('LICENSE.txt', 'NOTICE.txt')
    }
    archiveAppendix = 'all'
}

publishing {
    publications {
        gParsPublish(MavenPublication) {
            artifactId 'gpars'
            from components.java

            artifact jarDoc {
                archiveClassifier = 'javadoc'
            }
            artifact jarSrc {
                archiveClassifier = 'sources'
            }
            artifact zipGuide {
                archiveClassifier = 'guide'
            }
            artifact zipSamples {
                archiveClassifier = 'samples'
            }
            artifact zipJavaDemo {
                archiveClassifier = 'mvn-java-demo'
            }
            artifact zipDist {
                archiveClassifier = 'all'
            }
        }
    }
    //just publish locally for now
    repositories {
        if (gpars_useMavenLocal ) {
            mavenLocal()
        } else {
            //put other repositories, jfrog, etc here
        }
    }
}

/*
//todo need to sort this out
task release(dependsOn: ['build', 'jarSrc', 'jarDoc', 'zipSamples', 'zipJavaDemo', 'zipDist', 'zipGuide']).doLast {
    println 'We release now'
}
*/

idea {
    module {
        excludeDirs += file('gradle/') // Gradle directory including the wrapper subdirectory.
        excludeDirs += file('.settings/') // Eclipse settings directory.
        excludeDirs += file('bin') // Eclipse compilation directory.
        excludeDirs += file('out') // IDEA compilation directory.
        excludeDirs += file('build') // Gradle compilation directory.
        excludeDirs += file('docs') // Jon's book directory
        excludeDirs += file('java-demo') // A separate module of a pure-java gpars usage
    }
    project {
        jdkName '1.11'
        languageLevel 'JDK_11'
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
                vcsConfig.mapping[0].'@vcs' = 'Git'
                //Copy the inspection profiles as well as the spell-checker's dictionaries from the default project file
                def inspectionConfig = provider.asNode().component.find {
                    it.'@name' == 'InspectionProjectProfileManager'
                }
                if (inspectionConfig) node.remove(inspectionConfig)
                def dictionaryConfig = provider.asNode().component.find { it.'@name' == 'ProjectDictionaryState' }
                if (dictionaryConfig) node.remove(dictionaryConfig)
                new File('GPars_CI_only.ipr').withReader { reader ->
                    def project = new XmlParser().parse(reader)
                    def inspections = project.component.find { it.'@name' == 'InspectionProjectProfileManager' }
                    node.append(inspections)
                    def dictionaries = project.component.find { it.'@name' == 'ProjectDictionaryState' }
                    node.append(dictionaries)
                }
                def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
                gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])
            }
        }
    }
}
